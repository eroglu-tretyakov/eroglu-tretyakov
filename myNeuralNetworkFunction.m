function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 12-Feb-2024 22:02:10.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx6 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.0120417814929413;-0.0264900662251656;-0.0723684210526316;-0.0536828963795256;-0.307873090481786;-0.032520325203252];
x1_step1.gain = [0.336266181199812;0.090627188156447;0.0936825885978428;0.160376414055461;0.0168902826294062;1.26153846153846];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.9745571628325317981;1.5887336511377607717;1.1281996800719555907;-0.25859001021371397222;-0.18698075511746004018;-0.36388879423309278272;0.81256470135391634102;1.1203678295266881193;-1.7666544799611334504;-2.067986525863708458];
IW1_1 = [0.0061863368838126877106 -0.060915427737683575105 0.01005101746345203606 0.055509888792537889768 -0.6037181585979541909 1.0306734900883667283;-1.3629600253537896837 -1.0026272346673890112 0.3312805791648865128 -0.67832181069604935431 0.7252907954907398258 -0.52689609235022827338;-0.86451789272539103504 -0.27974172015114434631 -0.94113314223711952433 -0.48994130089393433947 -1.3182865330366191348 0.72862864914813940675;-0.0019079924756491696385 0.031970676061008021507 -0.0012392580226341604142 -0.027091099682819318878 0.17899320040203550719 -0.29842076755836632884;0.0031216430435789463416 -0.051088277184768673966 0.0021260435932825422212 0.043239203353322513967 -0.28925817414672899686 -0.072302555669458493104;-0.86157380638242198057 -0.24812266625299816969 0.2739858615126323782 1.8416541485693145308 0.63534807900997591901 0.70559508827585970536;0.29257945906323790108 0.98676459916866587907 0.028429665341205827278 1.4726013448228016944 -0.14939119748051041259 0.24333730272861334165;-0.002870041993577000447 0.043725424436304123621 -0.0020432104169306629024 -0.037157254686015467326 0.25081110928334737764 -0.36778904150765384662;-0.093411910907112288838 0.7770827662507718836 -0.059145398668128547348 -0.64059502889224440025 1.4194752689981398053 0.97688591352718578964;-1.1650486928294983002 0.78254570747443086276 0.38881610690987189471 -0.70283844633567549298 1.1917268683744883795 0.25552602469533058915];

% Layer 2
b2 = 0.1920853002732058612;
LW2_1 = [0.14976320868060261082 -0.00015795466974640126829 0.0007657238679835877285 -2.3273915992076790182 -1.8926456691209676553 0.00077553739317084079922 -0.0010542070826016671902 -1.5192857646503232782 0.042348343181215664099 -0.0016030341773905327444];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 1.26153846153846;
y1_step1.xoffset = -0.032520325203252;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
